name: Build Windows

on: [push, pull_request]

env:
  BOOST_ROOT: boost
  MSVC_TOOLSET_VERSION: 14.2

jobs:
  build-v8:
    # If v8 is in Workflow cache, don't build
    # Clone is necessary in any event to calculate a hash for the cache key
    name: Build v8
    runs-on: windows-latest
    outputs:
      v8-hash: ${{ steps.build-v8.outputs.v8-hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone v8
        run: |
          python -m pip install wheel
          echo "::group::Clone v8"
          python setup.py checkout_v8
          echo "::endgroup::"

      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@main
        with:
          path: |
            v8\out.gn\x64.release.sample\obj\v8_monolith.lib
            v8\include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

      - name: Initialize MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}

      - name: Build v8
        id: build-v8
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        continue-on-error: false
        run: |
          echo "v8-hash=${{ hashFiles('v8/src/**') }}" >> "$GITHUB_OUTPUT"
          python -m pip install wheel
          echo "::group::v8"
          python setup.py v8
          echo "::endgroup::"

      - name: Save v8 to cache
        uses: actions/cache/save@main
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        with:
          # Save compiled binary and header files
          # This will save an additional clone of v8 for the linker
          path: |
            v8\out.gn\x64.release.sample\obj\v8_monolith.lib
            v8\include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

  build:
    name: Build ${{ matrix.python-version }} wheel
    needs: build-v8
    runs-on: ${{ matrix.os }}
    env:
      DIST_NAME: stpyv8-windows-py${{ matrix.python-version }}
    strategy:
      matrix:
        # Needed for MSVC toolset 14.2
        os: [windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        boost-version: ['1.83.0']
        boost-version-snake: ['1_83_0']

    steps:
      - name: STEP 1. Checkout repository
        uses: actions/checkout@v3

      - name: STEP 2. Set up Python
        id: install-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install boost
        uses: MarkusJx/install-boost@main
        id: install-boost
        with:
          link: static
          boost_version: 1.81.0
          boost_install_dir: ${{ env.BOOST_ROOT }}
          platform_version: 2022
          toolset: msvc
            
      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@main
        with:
          path: |
            v8\out.gn\x64.release.sample\obj\v8_monolith.lib
            v8\include
          key: ${{ runner.os }}-build-v8-${{ needs.build-v8.outputs.v8-hash }}

      - name: Initialize MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ steps.restore-boost.outputs.cache-hit != 'true' }}

      - name: STEP 5. Build wheel
        env:
          # Set include and library files which will be picked up by setuptools
          INCLUDE: ${{ env.INCLUDE }};${{ steps.install-python.outputs.python-path }}include;${{ env.BOOST_ROOT }}
        run: |
          python -m pip install wheel pytest
          
          # v8 build should already be supplied from cache hence no need to rebuild
          python setup.py sdist bdist_wheel --skip-build-v8 -d ${{ env.DIST_NAME }}
          if (-not $?) {
            echo "::error::Wheel build failed"
            exit 1
          }
          python setup.py install
          if (-not $?) {
            echo "::error::Wheel installation failed"
            exit 1
          }

      - name: STEP 6. Test wheel
        run: |
          pytest -v

      - name: STEP 7. Create wheel zip
        uses: vimtor/action-zip@v1.1
        with:
          files: ${{ env.DIST_NAME }}/
          recursive: false
          dest: ${{ env.DIST_NAME }}.zip

      - name: STEP 7. Upload wheel zip
        uses: actions/upload-artifact@v3
        with:
         name: wheels
         path: ${{ env.DIST_NAME }}.zip
