from typing import Iterable, overload, Any, Iterator


class JSObject:
    def __getattr__(self, item: str): ...

    def __setattr__(self, key: str, value): ...

    def __delattr__(self, item: str): ...

    def __hash__(self) -> int: ...

    def __dir__(self) -> Iterable[str]: ...

    def __getitem__(self, item: str): ...

    def __setitem__(self, key: str, value): ...

    def __delitem__(self, key: str): ...

    def __contains__(self, item: str) -> bool: ...

    def __int__(self) -> int: ...

    def __float__(self) -> float: ...

    def __str__(self) -> str: ...

    def __bool__(self) -> bool: ...

    def __eq__(self, other: JSObject) -> bool: ...

    def __ne__(self, other: JSObject) -> bool: ...

    def clone(self) -> JSObject: ...

    def keys(self) -> list[JSObject]: ...

    @staticmethod
    def create(constructor: JSFunction, arguments=(), propertiesObject=dict()): ...


class JSNull:
    def __bool__(self) -> bool: ...

    def __str__(self) -> str: ...


class JSUndefined:
    def __bool__(self) -> bool: ...

    def __str__(self) -> str: ...


class JSArray:
    def __init__(self): ...

    def __len__(self) -> int: ...

    def __getitem__(self, item): ...

    def __setitem__(self, key, value): ...

    def __delitem__(self, key): ...

    def __dir__(self) -> Iterable[str]: ...

    def __contains__(self, item) -> bool: ...


class JSFunction:
    def __call__(self, *args, **kwargs): ...

    def apply(self, args: list, kwds: dict): ...

    def setName(self, name: str): ...

    @property
    def name(self) -> str: ...

    @property
    def owner(self) -> JSFunction: ...

    @property
    def linenum(self) -> int: ...

    @property
    def colnum(self) -> int: ...

    @property
    def resname(self) -> str: ...

    @property
    def inferredname(self) -> str: ...


class JSPlatform:
    def __init__(self, argv=""): ...


class JSIsolate:
    def __init__(self, owner: bool = False): ...

    @staticmethod
    @property
    def current() -> JSIsolate: ...

    @property
    def locked(self) -> bool: ...

    def GetCurrentStackTrace(self, frame_limit: int, options: JSObject): ...

    def enter(self): ...

    def leave(self): ...


class JSContext:
    @overload
    def __init__(self, context: JSContext): ...

    @overload
    def __init__(self, global_): ...

    @property
    def securityToken(self) -> str: ...

    @securityToken.setter
    def securitySetter(self, token: str): ...

    @property
    def locals(self): ...

    @staticmethod
    @property
    def entered() -> JSContext: ...

    @staticmethod
    @property
    def current() -> JSContext: ...

    @staticmethod
    @property
    def calling() -> JSContext: ...

    @staticmethod
    @property
    def inContext() -> bool: ...

    def eval(self, source, name="", line=-1, col=-1): ...

    def enter(self): ...

    def leave(self): ...

    def __bool__(self) -> bool: ...


class JSEngine:
    def __init__(self): ...

    @staticmethod
    @property
    def version() -> str: ...

    @staticmethod
    @property
    def dead() -> bool: ...

    @staticmethod
    def setFlags(flags: str): ...

    @staticmethod
    def terminateAllThreads(): ...

    @staticmethod
    def dispose(): ...

    @staticmethod
    def lowMemory(): ...

    @staticmethod
    def setStackLimit(stack_limit_size=0): ...

    def compile(self, source: str, name="", line=-1, col=-1) -> JSScript: ...


class JSScript:
    @property
    def source(self) -> str: ...

    def run(self) -> Any: ...


class JSStackTrace:
    def __len__(self) -> int: ...

    def __getitem__(self, item) -> JSStackFrame: ...

    def __iter__(self) -> Iterator[JSStackFrame]: ...

    def __str__(self) -> str: ...


class JSStackTraceOptions:
    LineNumber: int
    ColumnOffset: int
    ScriptName: int
    FunctionName: int
    IsEval: int
    IsConstructor: int
    Overview: int
    Detailed: int


class JSStackFrame:
    lineNum: int
    column: int
    scriptName: str
    funcName: str
    isEval: bool
    isConstructor: bool


class JSLocker:
    @overload
    def __init__(self): ...

    @overload
    def __init__(self, isolate: JSIsolate): ...

    @staticmethod
    @property
    def locked() -> bool: ...

    def entered(self) -> bool: ...

    def enter(self): ...

    def leave(self): ...


class JSUnlocker:
    def entered(self) -> bool: ...

    def enter(self): ...

    def leave(self): ...
